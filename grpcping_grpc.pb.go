// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: grpcping.proto

package grpc_ping

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PingService_StreamPing_FullMethodName = "/PingService/StreamPing"
)

// PingServiceClient is the client API for PingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PingServiceClient interface {
	// Sends a stream of Ping messages and receives a stream of Pong responses.
	StreamPing(ctx context.Context, opts ...grpc.CallOption) (PingService_StreamPingClient, error)
}

type pingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPingServiceClient(cc grpc.ClientConnInterface) PingServiceClient {
	return &pingServiceClient{cc}
}

func (c *pingServiceClient) StreamPing(ctx context.Context, opts ...grpc.CallOption) (PingService_StreamPingClient, error) {
	stream, err := c.cc.NewStream(ctx, &PingService_ServiceDesc.Streams[0], PingService_StreamPing_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pingServiceStreamPingClient{stream}
	return x, nil
}

type PingService_StreamPingClient interface {
	Send(*PingRequest) error
	Recv() (*PongResponse, error)
	grpc.ClientStream
}

type pingServiceStreamPingClient struct {
	grpc.ClientStream
}

func (x *pingServiceStreamPingClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingServiceStreamPingClient) Recv() (*PongResponse, error) {
	m := new(PongResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingServiceServer is the server API for PingService service.
// All implementations must embed UnimplementedPingServiceServer
// for forward compatibility
type PingServiceServer interface {
	// Sends a stream of Ping messages and receives a stream of Pong responses.
	StreamPing(PingService_StreamPingServer) error
	mustEmbedUnimplementedPingServiceServer()
}

// UnimplementedPingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPingServiceServer struct {
}

func (UnimplementedPingServiceServer) StreamPing(PingService_StreamPingServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPing not implemented")
}
func (UnimplementedPingServiceServer) mustEmbedUnimplementedPingServiceServer() {}

// UnsafePingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PingServiceServer will
// result in compilation errors.
type UnsafePingServiceServer interface {
	mustEmbedUnimplementedPingServiceServer()
}

func RegisterPingServiceServer(s grpc.ServiceRegistrar, srv PingServiceServer) {
	s.RegisterService(&PingService_ServiceDesc, srv)
}

func _PingService_StreamPing_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingServiceServer).StreamPing(&pingServiceStreamPingServer{stream})
}

type PingService_StreamPingServer interface {
	Send(*PongResponse) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type pingServiceStreamPingServer struct {
	grpc.ServerStream
}

func (x *pingServiceStreamPingServer) Send(m *PongResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingServiceStreamPingServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingService_ServiceDesc is the grpc.ServiceDesc for PingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PingService",
	HandlerType: (*PingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPing",
			Handler:       _PingService_StreamPing_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpcping.proto",
}
